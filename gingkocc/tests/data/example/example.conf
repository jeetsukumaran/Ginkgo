/* A Documented Comprehensive Example of a Gingko Run Configuration File */

/**
 * 1. A configuration file consists of multiple configration blocks. 
 * 2. Each block begins with an at-sign, followed by a block keyword 
 *    describing the type of block, followed by an name or label (sometimes this
 *   is optional), followed by the block body.
 * 3. The block body is enclosed in curly braces.
 * 4. Within each block body are a series of entries, typically beginning with a 
 *    keyword, followed by an equal sign, followed by a value or values, and 
 *    terminated with a semi-colon.
 * 5. Whitespace (spaces, tabs, newlines) are non-significant but do serve as a 
 *    token delimiter.
 * 6. Comments are C-style, i.e. non-nesting, open with a forward slash followed
 *    by an asterisk, and closed with an asterisk followed by a forward slash.
 */

/** 
 * A "World" block describes the landscape dimensions, the number of generations
 * for which to run the simulation, the number of factors of the fitness regime 
 * (i.e., number of dimensions to the fitness equation), a random seed, etc.
 * The label ("ExampleWorld" here) serves as a prefix for all the output 
 * produced by runs based on this configuration file.
 */ 
@world GingkoExampleWorld {
    
    /*** MANDATORY ENTRIES ***/
    
    ncols           = 40;       /* The x-dimension of the landscape. */
    nrows           = 20;       /* The y-dimension of the landscape. */
    ngens           = 1001;     /* The number of generations to run the simulation. */
    nfitness        = 5;       /* The number of dimensions to the fitness function: 1-10. */
    
    /*** OPTIONAL ENTRIES ***/
    
    /**
     * Seed for the random number generator.
     * Can also be specified on the command-line using the "-z" option, in which
     * case will override the value given here. If not specified on the command-
     * line, and this entry is absent, then the system time will be used as the 
     * seed.
     */
    rseed           = 42;
    
    /**
     * Under the fitness function, a difference of more than 3 between the 
     * environmental value and the genotypic value results in a survival 
     * probability of ~0.0001.
     * To allow for finer-grained fitness regimes, specify a number > 1 here.
     * All fitness factors (genotypic and environmental) will then be divided by
     * this number, yielding a wider range of values with non-trivial survival 
     * probabilities.
     */
    fitness-grain   = 1;
    
    /**
     * By default, at the end of the simulation, a full set of trees including
     * every individual in the simulation will be produced. These may not be
     * necessary if you have created custom tree samplings, and the full trees
     * may be prohibitively computationally expensive to produce. By setting this 
     * entry to 1, you stop the final default set of trees from being calculated.
     */
    suppress-final-output = 0;
}

/**
 * A species block describes the ecology (reproductive behavior, movement rates,
 * fitness etc.) of a species. The label serves to identify the species and will
 * be embedded as part of the tree and occurrence data filenames produces for
 * this species.
 */
@species Pseudozoon { 

    /**
     * The default values for the genotype of an individual of this species.
     */
    genotypic-fitness = 0 0 0 0 0;
       
    /**
     * The fitness function calculated for this species will be weighted by
     * these values. A value of < 1 minimizes the effect of that component of
     * the fitness function (i.e., the species is relatively tolerant to
     * that environmental parameter) while a value of > 1 emphasizes the effect
     * (i.e., the species is relatively more sensitive to that parameter.)
     */
    selection-weights = 1 1 1 1 1;
                        
    /** 
     * The probability (per fitness factor per individual per generation) that
     * a fitness factor mutates in value as it is inherited.
     */
    mutation-rate = 0.01;
    
    /**
     * The 'window' for a fitness factor mutation if it occurs: i.e, the mutated
     * fitness factors will be +/- this value.
     */
    mutation-size = 0.01;
    
    /**
     * The number of offspring produced in a successful mating by two 
     * individuals.
     */
    fecundity = 8;
    
    /**
     * Future versions of GINGKO will allow the evolution of reproductive rates.
     */
    fecundity-evolution-size = 0;
    
    /**
     * A "seed" population, to introduce this species to the landscape.
     * The notation in parenthesis following the keyword "init" describes the
     * seed population character in the form of "init(<n>:<N>#<G>)",
     * where:
     *      n = size of the seed population
     *      N = size of the ancestral population from where the individuals
     *          in the seed population are drawn
     *      G = number of generations that the the ancestral population was
     *          "bootstrapped" (i.e., evolving as a pure Wright-Fisher 
     *          population with no structuring, selection, etc.) before the
     *         individuals in the seed population were sampled and introduced
     *         into the landscape.
     * Thus, if "init(60:100*1000)" were specified, then the cell would be 
     * seeded by 30 individuals drawn at random from a population of a 100
     * that was allowed to go through 1000 cycles of reproduction (carried out
     * before the simulation starts). By fine tuning these parameters you can
     * ensure tha the individuals of the seed population have a coalescent 
     * history amongst themselves, even by Generation 0.
     * Following the equals sign should be a list of positions in 
     * the form of "x,y" (with no space between the x-coordinate, the comma,
     * or the y-coordinate) where the seed populations will be introduced.
     */
    init(100:100*10000) = 10,10 ;
    
    /**
     * The total amount of "movement cost" that individuals of this species
     * can "pay" during the migration phase.
     */
    movement-capacity = 1;
    
    /**
     * The probability that an individual of this species moves this round.
     * (defaults to 1.0).
     * Note that even a successful "move" has a 1/9 probability of ending up
     * in the same cell (the destination cell is selected from a 3x3 cell 
     * centered on the individuals' current location, which includes the 
     * current cell.
     */
    movement-probability = 1.0;             
}

/** Another species in the simulation. */
@species Caminacule { 
    selection-weights = 0.1 0.1 0.1 0.1 0.1;
    genotypic-fitness = 0 0 0 0 0;
    mutation-rate = 0.01;
    mutation-size = 0.01;
    fecundity = 4;
    fecundity-evolution-size = 0;
    init(100:100*10000) = 29,10 ;
    movement-capacity = 4;    
}

/**
 * Generation blocks describe changes to the landscape enviroment, carrying
 * capacity and species-specific movement costs. 
 * The name of the block sets the time which the settings described in the block
 * take place. So, for example, "Generation 0" describes settings/changes for
 * the first generation of the simulation, while "Generation 72" describes 
 * settings/changes for the second generation.
 * The most important thing to set in Generation 0 is the carrying capacity of
 * the landscape. This defaults to 0, which means no individuals will survive
 * the first round. The environment defaults to 0 as well (all components),
 * but as the default genotype value for all species is 0, this means that the
 * fitness is maximum by default. Movement costs default to 1.
 */
@generation 0 {
    /** 
     * Carrying capacity: ESRI ASCII grid file of same dimensions of the 
     * landscape describing maximum number of organisms (of all species) that 
     * can occupy each cell at the end of each round.
     */
    carrying-capacity = cc10.grd;
    
    /** 
     * Movemenent cost for species: ESRI ASCII grid file of same dimensions of 
     * the landscape describing cost for entering each cell in the landscape.
     * Movement costs are specific to each species (i.e., different species might
     * have different movement costs for entering the same cell).
     */
     movement:Pseudozoon = m1.grd;
     movement:Caminacule = m0.grd;
     
     /**
      * Environment settings: ESRI ASCII grid file of the same dimensions of
      * the landscape describing the fitness factor value for each cell. 
      * Factor components/dimensions are referred to by their 1-based index.
      * Thus, "1" refers to the first component or factor, while "10" refers
      * the last, if there are 10 factors specified.
      */
    environment:1 = e111.grd;      
    environment:2 = e101.grd;    
    environment:3 = e111.grd;    
    environment:4 = e111.grd;    
}

/** 
 * During this generation, we change the movment costs for one species. All
 * other values (movement for the other species, environment, carrying capacity, 
 * etc.) remain unaffected.
 */
 
@generation 10 {
    movement:Pseudozoon = m1.grd;
}

/** 
 * Here, we change the environment values for the first component of the
 * environment. All other values (other environment values, movmenet, carrying
 * capacity) remain unaffected.
 */
 
@generation 20 {
    movement:Pseudozoon = m1.grd;
}

/**
 * Here we force a dispersal event of 60 individuals of species "Pseudozoon" 
 * from cell 9,9 to cell 25,9.
 */
@generation 500 {
    disperse:Pseudozoon#60 = 9,9 25,9; 
}

/** Here we ask for occupancy data for one of the species in the landscape. */
@occurs {
    species = Pseudozoon;
    gen = 10;
}

/** 
 * Here we ask for occupancy data for the other species in the landscape. The 
 * label "ID1" will be embedded in the filename produced (along with the default
 * species name and generation #).
 */
@occurs ID1 {
    species = Pseudozoon;
    gen = 600;
}

/**
 * Request a full set of trees for the given species at the given generation: 
 *  - genealogy for the haploid locus
 *  - genealogies for each of the diploid locii, selecting one allele at random 
 *    from the diploid complement
 *  - genealogies for each of the diploid locii, including both alleles
 * 
 * All individuals of the species will be included in the tree.
 */
@tree {
    species = Pseudozoon;
    gen = 0;
}

/**
 * As above, but we restrict the individuals sampled to 5 from each cell.
 */
@tree {
    species = Pseudozoon;
    gen = 0;
    limit-per-cell = 5;
}

/**
 * As above, but we embed some extra information ("TEST1") in the file name,
 */
@tree TEST1 {
    species = Pseudozoon;
    gen = 0;
    limit-per-cell = 5;
}

/**
 * As above, but we restrict the sampling to the specified cells. All individuals
 * will be sampled from each cell specified.
 */
@tree {
    species = Pseudozoon;
    gen = 510;
    cells =     5,6 6,6 7,6 8,6 9,6          10,6 11,6 12,6 13,6 14,6
                5,7 6,7 7,7 8,7 9,7          10,7 11,7 12,7 13,7 14,7
                5,8 6,8 7,8 8,8 9,8          10,8 11,8 12,8 13,8 14,8
                5,9 6,9 7,9 8,9 9,9          10,9 11,9 12,9 13,9 14,9
                5,10 6,10 7,10 8,10 9,10     10,10 11,10 12,10 13,10 14,10
                5,11 6,11 7,11 8,11 9,11     10,11 11,11 12,11 13,11 14,11
                5,12 6,12 7,12 8,12 9,12     10,12 11,12 12,12 13,12 14,12
                5,13 6,13 7,13 8,13 9,13     10,13 11,13 12,13 13,13 14,13
                5,14 6,14 7,14 8,14 9,14     10,14 11,14 12,14 13,14 14,14
                
                25,6 26,6 27,6 28,6 29,6          30,6 31,6 32,6 33,6 34,6
                25,7 26,7 27,7 28,7 29,7          30,7 31,7 32,7 33,7 34,7
                25,8 26,8 27,8 28,8 29,8          30,8 31,8 32,8 33,8 34,8
                25,9 26,9 27,9 28,9 29,9          30,9 31,9 32,9 33,9 34,9
                25,10 26,10 27,10 28,10 29,10     30,10 31,10 32,10 33,10 34,10
                25,11 26,11 27,11 28,11 29,11     30,11 31,11 32,11 33,11 34,11
                25,12 26,12 27,12 28,12 29,12     30,12 31,12 32,12 33,12 34,12
                25,13 26,13 27,13 28,13 29,13     30,13 31,13 32,13 33,13 34,13
                25,14 26,14 27,14 28,14 29,14     30,14 31,14 32,14 33,14 34,14;
}

/**
 * As above, but we restrict the sampling to up to 10 individuals from each of
 * the specified cells. 
 */
@tree {
    species = Pseudozoon;
    gen = 510;
    limit-per-cell = 10;
    cells =     5,6 6,6 7,6 8,6 9,6          10,6 11,6 12,6 13,6 14,6
                5,7 6,7 7,7 8,7 9,7          10,7 11,7 12,7 13,7 14,7
                5,8 6,8 7,8 8,8 9,8          10,8 11,8 12,8 13,8 14,8
                5,9 6,9 7,9 8,9 9,9          10,9 11,9 12,9 13,9 14,9
                5,10 6,10 7,10 8,10 9,10     10,10 11,10 12,10 13,10 14,10
                5,11 6,11 7,11 8,11 9,11     10,11 11,11 12,11 13,11 14,11
                5,12 6,12 7,12 8,12 9,12     10,12 11,12 12,12 13,12 14,12
                5,13 6,13 7,13 8,13 9,13     10,13 11,13 12,13 13,13 14,13
                5,14 6,14 7,14 8,14 9,14     10,14 11,14 12,14 13,14 14,14
                
                25,6 26,6 27,6 28,6 29,6          30,6 31,6 32,6 33,6 34,6
                25,7 26,7 27,7 28,7 29,7          30,7 31,7 32,7 33,7 34,7
                25,8 26,8 27,8 28,8 29,8          30,8 31,8 32,8 33,8 34,8
                25,9 26,9 27,9 28,9 29,9          30,9 31,9 32,9 33,9 34,9
                25,10 26,10 27,10 28,10 29,10     30,10 31,10 32,10 33,10 34,10
                25,11 26,11 27,11 28,11 29,11     30,11 31,11 32,11 33,11 34,11
                25,12 26,12 27,12 28,12 29,12     30,12 31,12 32,12 33,12 34,12
                25,13 26,13 27,13 28,13 29,13     30,13 31,13 32,13 33,13 34,13
                25,14 26,14 27,14 28,14 29,14     30,14 31,14 32,14 33,14 34,14;
}

